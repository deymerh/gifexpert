{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","value","onChange","target","type","getGif","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GitExpertApp","categories","categorie","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAYhD,OACE,sBAAMC,SARa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAIhB,SACE,uBACEO,MAAOR,EACPS,SAde,SAACN,GACpBF,EAAcE,EAAEO,OAAOF,QAcnBG,KAAK,Y,+BCpBAC,EAAM,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,0FAC2EC,UAAUH,GADrF,sBAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATjB,kBAYbM,GAZa,4CAAH,sDCENO,EAAc,SAAC,GAAoB,IAAlBb,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MACjC,OACE,sBAAKI,UAAU,OAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WACRxB,EAAOC,GACJwB,MAAK,SAAAC,GACJC,YAAW,WACTJ,EAAS,CACPf,KAAMkB,EACNL,SAAS,MAEV,UAEN,CAACpB,IAEGqB,EDf2BM,CAAa3B,GAAvCoB,EAF+B,EAE/BA,QAAeP,EAFgB,EAEtBN,KAEjB,OAAOa,EAAU,4CACf,qCACE,mCAAMpB,EAAN,OACA,qBAAKgB,UAAU,8CAAf,SAEIH,EAAOJ,KAAI,SAAAC,GACT,OACE,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEMrBiB,EAjBM,WAAO,IAAD,EACW1C,mBAAS,CAAC,cADrB,mBAClB2C,EADkB,KACN5C,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACE4C,EAAWpB,KAAI,SAAAqB,GAAS,OACxB,cAAC,EAAD,CAEE9B,SAAU8B,GADLA,U,MCRfC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e4b08937.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport propTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n  const handleChange = (e) => {\n    setInputValue(e.target.value)\n  }\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 3) {\n      setCategories(cats => [inputValue, ...cats]);\n      setInputValue('')\n    }\n  }\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        value={inputValue}\n        onChange={handleChange}\n        type=\"text\" />\n    </form>\n  )\n}\nAddCategory.propTypes = {\n  setCategories: propTypes.func.isRequired\n}","export const getGif = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=MbMWXR11Ewm3MEOGEg0PB9K2Rz57d64M&q=${encodeURI(category)}&limit=10`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url\n    }\n  })\n  return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ url, title }) => {\n  return (\n    <div className=\"card\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const { loading, data: images } = useFetchGifs(category);\n\n  return loading ? <p>Cargando...</p> : (\n    <>\n      <h3> {category} </h3>\n      <div className=\"card-grid animate__animated animate__fadeIn\">\n        {\n          images.map(img => {\n            return (\n              <GifGridItem key={img.id} {...img} />\n            )\n          })\n        }\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react';\nimport { getGif } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect(() => {\n    getGif(category)\n      .then(imgs => {\n        setTimeout(() => {\n          setState({\n            data: imgs,\n            loading: false\n          })\n        }, 3000);\n      })\n  }, [category])\n\n  return state // object with data[] and loading = true\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GitExpertApp = () => {\n  const [categories, setCategories] = useState(['One punch']);\n\n  return (\n    <>\n      <h2>GitExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      { categories.map(categorie =>\n        <GifGrid\n          key={categorie}\n          category={categorie}\n        />)}\n    </>\n  )\n}\n\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GitExpertApp from './GitExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GitExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}